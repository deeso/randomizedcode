#   This file defines standard ELF types, structures, and macros.
#   Copyright (C) 1995-2003,2004,2005,2006 Free Software Foundation, Inc.
#   This file is part of the GNU C Library.
#
#   The GNU C Library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   The GNU C Library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with the GNU C Library; if not, write to the Free
#   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#   02111-1307 USA.



from ctypes import *
from copy import deepcopy


def byte_to_str(byte):
    return struct.pack("B", byte & 0x0ff)

def word_to_str(i):
    return struct.pack("BB", i&0xff00, i&0x0ff)
    
def dword_to_str(i):
    return struct.pack("I", i & 0x0ffffffff)
    
def qword_to_str(long):
    i = long & 0x0ffffffff00000000
    j = long & 0x00000000ffffffff
    return struct.pack("II", i,j)


def str_to_value(s):
    return lsb_str_to_int(s)

def reverse_bytes(bytes):
    bytes = list(bytes)
    bytes.reverse()
    return "".join(bytes)

def lsb_to_msb(bytes):
    return reverse_bytes(bytes)

def msb_to_lsb(s):
    return reverse_bytes(bytes)

def lsb_str_to_int(bytes):
    value = 0
    l_bytes = list(bytes)
    for i in xrange(len(l_bytes)):
        value = (value <<  8) + ord(l_bytes[len(l_bytes)-1 - i])
    return value    

def msb_str_to_int(bytes):
    value = 0
    l_bytes = list(bytes)
    for i in xrange(len(l_bytes)):
        value = (value <<  8) + ord(l_bytes[i])
    return value    


def resolve_flags(_dict, _value):
    flag = ""
    for key in _dict:
        if _value & key:
           flag +=  _dict[key] + " "
    return flag

def get_string(_dict, _value):
    if _dict.has_key(_value):
        return _dict[_value]
    else:
        return "INVALID ENTRY: ",hex(_value)
    
def check_st_type(type):
    if not ST_TYPE.has_key(type):
        if sh_type >= 10 and sh_type <= 12:
            return get_string(ST_TYPE, -2)
        elif sh_type >= 13 and sh_type <= 15:
            return get_string(ST_TYPE, -1)
    return get_string(ST_TYPE, type)

        
def check_shindicies(sh_num):
    if not SH_INDICIES.has_key(sh_type):
        if sh_type >= 0xff00 and sh_type <= 0xff1f:
            return get_string(SH_INDICIES, -1)
        elif sh_type >= 0xff20 and sh_type <= 0xff2f:
            return get_string(SH_INDICIES, -2)
    return get_string(SH_TYPE, sh_type)
    
    
def check_sh_type(sh_type):
    if not SH_TYPE.has_key(sh_type):
        if sh_type >= 0x70000000 and sh_type <= 0x7fffffff:
            return get_string(SH_TYPE, -1)
        elif sh_type >= 0x80000000 and sh_type <= 0x8fffffff:
            return get_string(SH_TYPE, -2)
    return get_string(SH_TYPE, sh_type)

def check_ph_type(ph_type):
    if not P_TYPE.has_key(ph_type):
        if ph_type >= 0x70000000 and ph_type <= 0x7fffffff:
            return get_string(P_TYPE, -1)
    return get_string(P_TYPE, ph_type)


EI_NIDENT = 16
EI_MAG0 = 0
ELFMAG0 = 0x7f
EI_MAG1 = 1
ELFMAG1 = 'E'
EI_MAG2 = 2
ELFMAG2 = 'L'
EI_MAG3 = 3
ELFMAG3 = 'F'
ELFMAG = "\177ELF"
SELFMAG = 4

EI_CLASS = 4
ELFCLASSTYPE = { 0:"Invalid Class",
                 1:"ELFCLASS32",
                 2:"ELFCLASS64"               
                }

ELFCLASSNUM = 3
EI_DATA = 5
E_DATA = {
    0:"ELFDATANONE",
    1:"ELFDATA2LSB",
    2:"ELFDATA2MSB",
    3:"ELFDATANUM"
}
ELFDATANONE = 0
ELFDATA2LSB = 1
ELFDATA2MSB = 2
ELFDATANUM = 3

EI_VERSION = 6
EI_OSABI = 7
E_OS_ABI = {
    0:"ELFOSABI_SYSV or NONE",
    1:"ELFOSABI_HPUX",
    2:"ELFOSABI_NETBSD",
    3:"ELFOSABI_LINUX",
    6:"ELFOSABI_SOLARIS",
    7:"ELFOSABI_AIX",
    8:"ELFOSABI_IRIX",
    9:"ELFOSABI_FREEBSD",
    10:"ELFOSABI_TRU64",
    11:"ELFOSABI_MODESTO",
    12:"ELFOSABI_OPENBSD",
    97:"ELFOSABI_ARM"
}
ELFOSABI_NONE = 0
ELFOSABI_SYSV = 0
ELFOSABI_HPUX = 1
ELFOSABI_NETBSD = 2
ELFOSABI_LINUX = 3
ELFOSABI_SOLARIS = 6
ELFOSABI_AIX = 7
ELFOSABI_IRIX = 8
ELFOSABI_FREEBSD = 9
ELFOSABI_TRU64 = 10
ELFOSABI_MODESTO = 11
ELFOSABI_OPENBSD = 12
ELFOSABI_ARM = 97


EI_ABIVERSION = 8
EI_PAD = 9
ET_LOOS =  0xfe00
ET_HIOS =  0xfeff
ET_LOPROC = 0xff00
ET_HIPROC = 0xffff

E_TYPE = {
    0:"ET_NONE: No File Type",
    1:"ET_REL: Relocatable ",
    2:"ET_EXEC: Executable ", 
    3:"ET_DYN: Shared Object",
    4:"ET_CORE: Core File",
    5:"ET_NUM",
    0xfe00:"ET_LOOS: Specific OS",
    0xfeff:"ET_HIOS",
    0xff00:"ET_LOPROC",
    0xffff:"ET_HIPROC"
}
ET_NUM = 5
E_MACHINE = {
 0:"EM_NONE",
 1:"EM_M32",
 2:"EM_SPARC",
 3:"EM_386",
 4:"EM_68K",
 5:"EM_88K",
 7:"EM_860",
 8:"EM_MIPS",
 9:"EM_S370",
10:"EM_MIPS_RS3_LE",
15:"EM_PARISC",
17:"EM_VPP500",
18:"EM_SPARC32PLUS",
19:"EM_960",
20:"EM_PPC",
21:"EM_PPC64",
22:"EM_S390",
36:"EM_V800",
37:"EM_FR20",
38:"EM_RH32",
39:"EM_RCE",
40:"EM_ARM",
41:"EM_FAKE_ALPHA",
42:"EM_SH",
43:"EM_SPARCV9",
44:"EM_TRICORE",
45:"EM_ARC",
46:"EM_H8_300",
47:"EM_H8_300H",
48:"EM_H8S",
49:"EM_H8_500",
50:"EM_IA_64",
51:"EM_MIPS_X",
52:"EM_COLDFIRE",
53:"EM_68HC12",
54:"EM_MMA",
55:"EM_PCP",
56:"EM_NCPU",
57:"EM_NDR1",
58:"EM_STARCORE",
59:"EM_ME16",
60:"EM_ST100",
61:"EM_TINYJ",
62:"EM_X86_64",
63:"EM_PDSP",
66:"EM_FX66",        
67:"EM_ST9PLUS",
68:"EM_ST7",        
69:"EM_68HC16", 
70:"EM_68HC11",
71:"EM_68HC08",
72:"EM_68HC05", 
73:"EM_SVX",
74:"EM_ST19",
75:"EM_VAX",
76:"EM_CRIS",
77:"EM_JAVELIN", 
78:"EM_FIREPATH",    
79:"EM_ZSP",      
80:"EM_MMIX",
81:"EM_HUANY",
82:"EM_PRISM",
83:"EM_AVR",
84:"EM_FR30",
85:"EM_D10V",
86:"EM_D30V",
87:"EM_V850",
88:"EM_M32R",
89:"EM_MN10300",
90:"EM_MN10200",
91:"EM_PJ",
92:"EM_OPENRISC",
93:"EM_ARC_A5",
94:"EM_XTENSA",
95:"EM_NUM",
0x9026:"EM_ALPHA"
}
EM_NUM = 95
EM_ALPHA = 0x9026


E_VERSION = {
	0:"EV_NONE",
	1:"EV_CURRENT"
}
EV_NUM = 2

SHN_INDICES = {
    -1:"SHN_PROC specific",
    -2:"SHN_OS specific",
#	0:"SHN_UNDEF",
	0xff00:"SHN_LORESERVE",
	0xff00:"SHN_LOPROC",
	0xff1f:"SHN_HIPROC",
	0xff20:"SHN_LOOS",
	0xff3f:"SHN_HIOS",
	0xfff1:"SHN_ABS",
	0xfff2:"SHN_COMMON",
	0xffff:"SHN_XINDEX"
#	0xffff:"SHN_HIRESERVE"
}
SH_TYPE = {
    -1:"SHT_PROC",
    -2:"SHT_USER",
	0:"SHT_NULL",
	1:"SHT_PROGBITS",
	2:"SHT_SYMTAB",
	3:"SHT_STRTAB",
	4:"SHT_RELA",
	5:"SHT_HASH",
	6:"SHT_DYNAMIC",
	7:"SHT_NOTE",
	8:"SHT_NOBITS",
    9:"SHT_REL",
	10:"SHT_SHLIB",
	11:"SHT_DYNSYM",
	14:"SHT_INIT_ARRAY",
	15:"SHT_FINI_ARRAY",
	16:"SHT_PREINIT_ARRAY",
	17:"SHT_GROUP",
	18:"SHT_SYMTAB_SHNDX",
	19:"SHT_NUM",
	0x60000000:"SHT_LOOS",
	0x6ffffff6:"SHT_GNU_HASH",
	0x6ffffff7:"SHT_GNU_LIBLIST",
	0x6ffffff8:"SHT_CHECKSUM",
	0x6ffffffa:"SHT_LOSUNW",
	0x6ffffffa:"SHT_SUNW_move",
	0x6ffffffb:"SHT_SUNW_COMDAT",
	0x6ffffffc:"SHT_SUNW_syminfo",
	0x6ffffffd:"SHT_GNU_verdef",
	0x6ffffffe:"SHT_GNU_verneed",
	0x6fffffff:"SHT_GNU_versym",
	0x6fffffff:"SHT_HISUNW",
	0x6fffffff:"SHT_HIOS",
	0x70000000:"SHT_LOPROC",
	0x7fffffff:"SHT_HIPROC",
	0x80000000:"SHT_LOUSER",
	0x8fffffff:"SHT_HIUSER"
}


SHT_NUM = 19
SH_FLAGS = {
	  0x1:"SHF_WRITE",
	  0x2:"SHF_ALLOC",
	  0x4:"SHF_EXECINSTR",
	  0x8:"SHF_MERGE",
	 0x10:"SHF_STRINGS",
	 0x20:"SHF_INFO_LINK",
	 0x40:"SHF_LINK_ORDER",
	 0x80:"SHF_OS_NONCONFORMING",
	0x100:"SHF_GROUP",
	0x200:"SHF_TLS",
	0x0ff00000:"SHF_MASKOS",
	0xf0000000:"SHF_MASKPROC",
	0x40000000:"SHF_ORDERED",
	0x80000000:"SHF_EXCLUDE"
}

GRP_COMDAT = 0x1
SI_BOUNDTO = {
	0xffff:"SYMINFO_BT_SELF",
	0xfffe:"SYMINFO_BT_PARENT",
	0xff00:"SYMINFO_BT_LOWRESERVE"
}
SI_FLAGS = {
	0x0001:"SYMINFO_FLG_DIRECT",
	0x0002:"SYMINFO_FLG_PASSTHRU",
	0x0004:"SYMINFO_FLG_COPY",
	0x0008:"SYMINFO_FLG_LAZYLOAD"
}
SYMINFO = {
	0:"SYMINFO_NONE",
	1:"SYMINFO_CURRENT",
	2:"SYMINFO_NUM"
}
SYMINFO_NUM = 2

ST_BIND = {
	0:"STB_LOCAL",
	1:"STB_GLOBAL",
	2:"STB_WEAK",
	3:"STB_NUM",
	10:"STB_LOOS",
	12:"STB_HIOS",
	13:"STB_LOPROC",
	15:"STB_HIPROC"
}

ST_TYPE = {
    -2:"STT_PROC specific",
    -1:"STT_OS specific",
	0:"STT_NOTYPE",
	1:"STT_OBJECT",
	2:"STT_FUNC",
	3:"STT_SECTION",
	4:"STT_FILE",
	5:"STT_COMMON",
	6:"STT_TLS",
	7:"STT_NUM",
	10:"STT_LOOS",
	12:"STT_HIOS",
	13:"STT_LOPROC",
	15:"STT_HIPROC"
}

STN_UNDEF = 0
ST_VISIBILITY = {
	0:"STV_DEFAULT",
	1:"STV_INTERNAL",
	2:"STV_HIDDEN",
	3:"STV_PROTECTED"
}

P_TYPE = {
	-1:"PT_PROC specification",
    0:"PT_NULL",
	1:"PT_LOAD",
	2:"PT_DYNAMIC",
	3:"PT_INTERP",
	4:"PT_NOTE",
	5:"PT_SHLIB",
	6:"PT_PHDR",
	7:"PT_TLS",
	8:"PT_NUM",
	0x60000000:"PT_LOOS",
	0x6474e550:"PT_GNU_EH_FRAME",
	0x6474e551:"PT_GNU_STACK",
	0x6474e552:"PT_GNU_RELRO",
	0x6ffffffa:"PT_LOSUNW",
	0x6ffffffa:"PT_SUNWBSS",
	0x6ffffffb:"PT_SUNWSTACK",
	0x6fffffff:"PT_HISUNW",
	0x6fffffff:"PT_HIOS",
	0x70000000:"PT_LOPROC",
	0x7fffffff:"PT_HIPROC"
}

PT_LOOS        =  0x60000000
PT_GNU_EH_FRAME=  0x6474e550
PT_GNU_STACK   =  0x6474e551
PT_GNU_RELRO   =  0x6474e552
PT_LOSUNW      =  0x6ffffffa
PT_SUNWBSS     =  0x6ffffffa
PT_SUNWSTACK   =  0x6ffffffb
PT_HISUNW      =  0x6fffffff
PT_HIOS        =  0x6fffffff
PT_LOPROC      =  0x70000000
PT_HIPROC      =  0x7fffffff

PT_NUM = 8
P_FLAGS = {
	0x1:"PF_X",
	0x2:"PF_W",
	0x4:"PF_R",
	0x0ff00000:"PF_MASKOS",
	0xf0000000:"PF_MASKPROC"
}
# Note Segment descriptor
NT_TYPES = {
	1:"NT_PRSTATUS",
	2:"NT_FPREGSET",
	3:"NT_PRPSINFO",
	4:"NT_PRXREG",
	4:"NT_TASKSTRUCT",
	6:"NT_AUXV",
	7:"NT_GWINDOWS",
	8:"NT_ASRS",
	10:"NT_PSTATUS",
	13:"NT_PSINFO",
	14:"NT_PRCRED",
	15:"NT_UTSNAME",
	16:"NT_LWPSTATUS",
	17:"NT_LWPSINFO",
	20:"NT_PRFPXREG",
	1:"NT_VERSION"
}
D_TAG = {
	0x6ffffeff:"DT_LOOS",
	0x6ffff000:"DT_HIOS",
	0x70000000:"DT_LOPROC",
	0x7fffffff:"DT_HIPROC",
	 0:"DT_NULL", 
	 1:"DT_NEEDED", 
	 2:"DT_PLTRELSZ", 
	 3:"DT_PLTGOT", 
	 4:"DT_HASH",            
	 5:"DT_STRTAB",    
	 6:"DT_SYMTAB", 
	 7:"DT_RELA",            
	 8:"DT_RELASZ", 
	 9:"DT_RELAENT", 
	10:"DT_STRSZ",
	11:"DT_SYMENT",
	12:"DT_INIT",
	13:"DT_FINI",
	14:"DT_SONAME",
	16:"DT_SYMBOLIC",
	17:"DT_REL",
	18:"DT_RELSZ",
	19:"DT_RELENT",
	20:"DT_PLTREL",
	21:"DT_DEBUG",
	22:"DT_TEXTREL",
	23:"DT_JMPREL",
	24:"DT_BIND_NOW",
	25:"DT_INIT_ARRAY",
	26:"DT_FINI_ARRAY",
	27:"DT_INIT_ARRAYSZ",
	28:"DT_FINI_ARRAYSZ",
	29:"DT_RUNPATH",
	30:"DT_FLAGS",
	32:"DT_ENCODING",
	32:"DT_PREINIT_ARRAY",
	33:"DT_PREINIT_ARRAYSZ",
	34:"DT_NUM"
}
DT_NUM = 34
DT_MIPS_NUM = 0x32
DT_PROCNUM = 0x32

D_PTR = {
	0x6ffffe00:"DT_ADDRRNGLO",   
	0x6ffffef5:"DT_GNU_HASH",    
	0x6ffffef6:"DT_TLSDESC_PLT", 
	0x6ffffef7:"DT_TLSDESC_GOT", 
	0x6ffffef8:"DT_GNU_CONFLICT",
	0x6ffffef9:"DT_GNU_LIBLIST", 
	0x6ffffefa:"DT_CONFIG",      
	0x6ffffefb:"DT_DEPAUDIT",    
	0x6ffffefc:"DT_AUDIT",       
	0x6ffffefd:"DT_PLTPAD",      
	0x6ffffefe:"DT_MOVETAB",     
	0x6ffffeff:"DT_SYMINFO",     
	0x6ffffeff:"DT_ADDRRNGHI",   
}
D_VAL = {
	0x6ffffd00:"DT_VALRNGLO",    
	0x6ffffdf5:"DT_GNU_PRELINKED",   
	0x6ffffdf6:"DT_GNU_CONFLICTSZ",  
	0x6ffffdf7:"DT_GNU_LIBLISTSZ",   
	0x6ffffdf8:"DT_CHECKSUM",     
	0x6ffffdf9:"DT_PLTPADSZ",     
	0x6ffffdfa:"DT_MOVEENT",      
	0x6ffffdfb:"DT_MOVESZ",       
	0x6ffffdfc:"DT_FEATURE_1",       
	0x6ffffdfd:"DT_POSFLAG_1",       
	0x6ffffdfe:"DT_SYMINSZ",         
	0x6ffffdff:"DT_SYMINENT",        
	0x6ffffdff:"DT_VALRNGHI",     
	0x6ffffff0:"DT_VERSYM",       
	0x6ffffff9:"DT_RELACOUNT",
	0x6ffffffa:"DT_RELCOUNT",    
	0x6ffffffb:"DT_FLAGS_1",
	0x6ffffffc:"DT_VERDEF",
	0x6ffffffd:"DT_VERDEFNUM",
	0x6ffffffe:"DT_VERNEED",
	0x6fffffff:"DT_VERNEEDNUM",
	0x00000001:"DF_ORIGIN",
	0x00000002:"DF_SYMBOLIC",
	0x00000004:"DF_TEXTREL",
	0x00000008:"DF_BIND_NOW",
	0x00000010:"DF_STATIC_TLS",
	0x00000001:"DF_1_NOW",
	0x00000002:"DF_1_GLOBAL",
	0x00000004:"DF_1_GROUP",
	0x00000008:"DF_1_NODELETE",
	0x00000010:"DF_1_LOADFLTR",
	0x00000020:"DF_1_INITFIRST",
	0x00000040:"DF_1_NOOPEN",
	0x00000080:"DF_1_ORIGIN",
	0x00000100:"DF_1_DIRECT",
	0x00000200:"DF_1_TRANS",
	0x00000400:"DF_1_INTERPOSE",
	0x00000800:"DF_1_NODEFLIB",
	0x00001000:"DF_1_NODUMP",
	0x00002000:"DF_1_CONFALT",
	0x00004000:"DF_1_ENDFILTEE",
	0x00008000:"DF_1_DISPRELDNE",
	0x00010000:"DF_1_DISPRELPND",
	0x00000001:"DTF_1_PARINIT",
	0x00000002:"DTF_1_CONFEXP",
	0x00000001:"DF_P1_LAZYLOAD",
	0x00000002:"DF_P1_GROUPPERM",
	0x7ffffffd:"DT_AUXILIARY",
	0x7fffffff:"DT_FILTER"
}
DT_VALNUM  = 12
DT_ADDRNUM = 11
DT_EXTRANUM =  3
DT_VERSIONTAGNUM  = 16

def DT_VALTAGIDX(tag):
		return (0x6ffffdff - (tag))  
def DT_ADDRTAGIDX(tag):
		return (0x6ffffeff - (tag)) 
#def DT_EXTRATAGIDX(tag):
#		((Elf32_Word)-((Elf32_Sword) (tag) <<1>>1)-1)

def DT_VERSIONTAGIDX(tag):
		return (0x6ffffffe - (tag)) 
VN_VERSION ={
				0:"VER_DEF_NONE",
				1:"VER_DEF_CURRENT",
				2:"VER_DEF_NUM"
}
VER_DEF_NUM = 2
VD_FLAGS ={
				0x1:"VER_FLG_BASE",
				0x2:"VER_FLG_WEAK"
}
VD_NDX ={
				0:"VER_NDX_LOCAL",
				1:"VER_NDX_GLOBAL",
				0xff00:"VER_NDX_LORESERVE",
				0xff01:"VER_NDX_ELIMINATE"
}
VN_VERSION ={
				0:"VER_NEED_NONE",
				1:"VER_NEED_CURRENT",
				2:"VER_NEED_NUM"
}
VER_NEED_NUM = 2
VNA_FLAGS ={
	0x2:"VER_FLG_WEAK"
}

A_TYPE ={
 0:"AT_NULL",
 1:"AT_IGNORE",
 2:"AT_EXECFD",
 3:"AT_PHDR",
 4:"AT_PHENT",
 5:"AT_PHNUM",
 6:"AT_PAGESZ",
 7:"AT_BASE",
 8:"AT_FLAGS",
 9:"AT_ENTRY",
10:"AT_NOTELF",
11:"AT_UID",
12:"AT_EUID",
13:"AT_GID",
14:"AT_EGID",
17:"AT_CLKTCK",
15:"AT_PLATFORM",
16:"AT_HWCAP",
18:"AT_FPUCW",
19:"AT_DCACHEBSIZE",
20:"AT_ICACHEBSIZE", 
21:"AT_UCACHEBSIZE",
22:"AT_IGNOREPPC",
23:"AT_SECURE",
32:"AT_SYSINFO",
33:"AT_SYSINFO_EHDR",
34:"AT_L1I_CACHESHAPE",
35:"AT_L1D_CACHESHAPE",
36:"AT_L2_CACHESHAPE",
37:"AT_L3_CACHESHAPE"
				}				

SOLARIS ={
				1:"ELF_NOTE_PAGESIZE_HINT" 

}
ELF_NOTE_SOLARIS = "SUNW Solaris"
ELF_NOTE_GNU = "GNU"
ELF_NOTE_ABI = 1
ELF_NOTE_OS = {
    0:"ELF_NOTE_OS_LINUX",
	1:"ELF_NOTE_OS_GNU",
	2:"ELF_NOTE_OS_SOLARIS2",
	3:"ELF_NOTE_OS_FREEBSD"
}

E_FLAGS ={
				0x00810000:"EF_CPU32"
}
M68K_RELOCS ={
			 0:"R_68K_NONE",
			 1:"R_68K_32",
			 2:"R_68K_16",
			 3:"R_68K_8",
			 4:"R_68K_PC32",
			 5:"R_68K_PC16",
			 6:"R_68K_PC8",
			 7:"R_68K_GOT32",
			 8:"R_68K_GOT16",
			 9:"R_68K_GOT8",
			10:"R_68K_GOT32O",
			11:"R_68K_GOT16O",
			12:"R_68K_GOT8O",
			13:"R_68K_PLT32",
			14:"R_68K_PLT16",
			15:"R_68K_PLT8",
			16:"R_68K_PLT32O",
			17:"R_68K_PLT16O",
			18:"R_68K_PLT8O",
			19:"R_68K_COPY",
			20:"R_68K_GLOB_DAT",
			21:"R_68K_JMP_SLOT",
			22:"R_68K_RELATIVE",
			23:"R_68K_NUM"
}
R_68K_NUM = 23

I386_RELOCS ={
	 0:"R_386_NONE",
	 1:"R_386_32",
	 2:"R_386_PC32",
	 3:"R_386_GOT32",
	 4:"R_386_PLT32",
	 5:"R_386_COPY",
	 6:"R_386_GLOB_DAT",
	 7:"R_386_JMP_SLOT",
	 8:"R_386_RELATIVE",
	 9:"R_386_GOTOFF",
	10:"R_386_GOTPC",
	11:"R_386_32PLT",
	13:"STT_SPARC_REGISTER",
    14:"R_386_TLS_TPOFF",
	15:"R_386_TLS_IE",
	16:"R_386_TLS_GOTIE",
	17:"R_386_TLS_LE",
	18:"R_386_TLS_GD",
	19:"R_386_TLS_LDM",
	20:"R_386_16",
	21:"R_386_PC16",
	22:"R_386_8",
	23:"R_386_PC8",
	24:"R_386_TLS_GD_32",
	25:"R_386_TLS_GD_PUSH",
	26:"R_386_TLS_GD_CALL",
	27:"R_386_TLS_GD_POP",
	28:"R_386_TLS_LDM_32",
	29:"R_386_TLS_LDM_PUSH",
	30:"R_386_TLS_LDM_CALL",
	31:"R_386_TLS_LDM_POP",
	32:"R_386_TLS_LDO_32",
	33:"R_386_TLS_IE_32",
	34:"R_386_TLS_LE_32",
	35:"R_386_TLS_DTPMOD32",
	36:"R_386_TLS_DTPOFF32",
	37:"R_386_TLS_TPOFF32",
	38:"R_386_NUM"
}
R_386_NUM = 38
E_FLAGS64={
    0:"EF_SPARCV9_TSO",
    1:"EF_SPARCV9_PSO",
    2:"EF_SPARCV9_RMO",
    3:"EF_SPARCV9_MM", 
    0x800000:"EF_SPARC_LEDATA",
    0xFFFF00:"EF_SPARC_EXT_MASK",
    0x000100:"EF_SPARC_32PLUS",
    0x000200:"EF_SPARC_SUN_US1",
    0x000400:"EF_SPARC_HAL_R1",
    0x000800:"EF_SPARC_SUN_US3"
}

SPARC64_RELOCS ={
 0:"R_SPARC_NONE",
 1:"R_SPARC_8",
 2:"R_SPARC_16",
 3:"R_SPARC_32",
 4:"R_SPARC_DISP8",
 5:"R_SPARC_DISP16",
 6:"R_SPARC_DISP32",
 7:"R_SPARC_WDISP30",
 8:"R_SPARC_WDISP22",
 9:"R_SPARC_HI22",
10:"R_SPARC_22",
11:"R_SPARC_13",
12:"R_SPARC_LO10",
13:"R_SPARC_GOT10",
14:"R_SPARC_GOT13",
15:"R_SPARC_GOT22",
16:"R_SPARC_PC10",
17:"R_SPARC_PC22",
18:"R_SPARC_WPLT30",
19:"R_SPARC_COPY",
20:"R_SPARC_GLOB_DAT",
21:"R_SPARC_JMP_SLOT",
22:"R_SPARC_RELATIVE",
23:"R_SPARC_UA32",
24:"R_SPARC_PLT32",
25:"R_SPARC_HIPLT22",
26:"R_SPARC_LOPLT10",
27:"R_SPARC_PCPLT32",
28:"R_SPARC_PCPLT22",
29:"R_SPARC_PCPLT10",
30:"R_SPARC_10",
31:"R_SPARC_11",
32:"R_SPARC_64",
33:"R_SPARC_OLO10",
34:"R_SPARC_HH22",
35:"R_SPARC_HM10",
36:"R_SPARC_LM22",
37:"R_SPARC_PC_HH22",
38:"R_SPARC_PC_HM10",
39:"R_SPARC_PC_LM22",
40:"R_SPARC_WDISP16",
41:"R_SPARC_WDISP19",
43:"R_SPARC_7",
44:"R_SPARC_5",
45:"R_SPARC_6",
46:"R_SPARC_DISP64",
47:"R_SPARC_PLT64",
48:"R_SPARC_HIX22",
49:"R_SPARC_LOX10",
50:"R_SPARC_H44",
51:"R_SPARC_M44",
52:"R_SPARC_L44",
53:"R_SPARC_REGISTER",
54:"R_SPARC_UA64",
55:"R_SPARC_UA16",
56:"R_SPARC_TLS_GD_HI22",
57:"R_SPARC_TLS_GD_LO10",
58:"R_SPARC_TLS_GD_ADD",
59:"R_SPARC_TLS_GD_CALL",
60:"R_SPARC_TLS_LDM_HI22",
61:"R_SPARC_TLS_LDM_LO10",
62:"R_SPARC_TLS_LDM_ADD",
63:"R_SPARC_TLS_LDM_CALL",
64:"R_SPARC_TLS_LDO_HIX22",
65:"R_SPARC_TLS_LDO_LOX10",
66:"R_SPARC_TLS_LDO_ADD",
67:"R_SPARC_TLS_IE_HI22",
68:"R_SPARC_TLS_IE_LO10",
69:"R_SPARC_TLS_IE_LD",
70:"R_SPARC_TLS_IE_LDX",
71:"R_SPARC_TLS_IE_ADD",
72:"R_SPARC_TLS_LE_HIX22",
73:"R_SPARC_TLS_LE_LOX10",
74:"R_SPARC_TLS_DTPMOD32",
75:"R_SPARC_TLS_DTPMOD64",
76:"R_SPARC_TLS_DTPOFF32",
77:"R_SPARC_TLS_DTPOFF64",
78:"R_SPARC_TLS_TPOFF32",
79:"R_SPARC_TLS_TPOFF64",
80:"R_SPARC_NUM"
}
R_SPARC_NUM = 80
SPARC_DTAGS ={
	0x70000001:"DT_SPARC_REGISTER",
	2:"DT_SPARC_NUM"
}
DT_SPARC_NUM = 2
SPARC_AT_HWCAP ={
				1:"HWCAP_SPARC_FLUSH",
				2:"HWCAP_SPARC_STBAR",
				4:"HWCAP_SPARC_SWAP",
				8:"HWCAP_SPARC_MULDIV",
				16:"HWCAP_SPARC_V9",
				32:"HWCAP_SPARC_ULTRA3",
				64:"HWCAP_SPARC_BLKINIT"
}
E_FLAGS_MIPS ={
	0x00000000:"E_MIPS_ARCH_1",
	0x10000000:"E_MIPS_ARCH_2",
	0x20000000:"E_MIPS_ARCH_3",
	0x30000000:"E_MIPS_ARCH_4",
	0x40000000:"E_MIPS_ARCH_5",
	0x60000000:"E_MIPS_ARCH_32",
	0x70000000:"E_MIPS_ARCH_64",
	1:"EF_MIPS_NOREORDER",
	2:"EF_MIPS_PIC",
	4:"EF_MIPS_CPIC",
	8:"EF_MIPS_XGOT",
	16:"EF_MIPS_64BIT_WHIRL",
	32:"EF_MIPS_ABI2",
	64:"EF_MIPS_ABI_ON32",
	0xf0000000:"EF_MIPS_ARCH",
	0x00000000:"EF_MIPS_ARCH_1",
	0x10000000:"EF_MIPS_ARCH_2",
	0x20000000:"EF_MIPS_ARCH_3",
	0x30000000:"EF_MIPS_ARCH_4",
	0x40000000:"EF_MIPS_ARCH_5",
	0x60000000:"EF_MIPS_ARCH_32",
	0x70000000:"EF_MIPS_ARCH_64"
}

SHN_INDICES_MIPS ={
	0xff00:"SHN_MIPS_ACOMMON",
	0xff01:"SHN_MIPS_TEXT",
	0xff02:"SHN_MIPS_DATA",
	0xff03:"SHN_MIPS_SCOMMON",
	0xff04:"SHN_MIPS_SUNDEFINED"
}
SH_TYPE32_MIPS={
	0x70000000:"SHT_MIPS_LIBLIST",
	0x70000001:"SHT_MIPS_MSYM",
	0x70000002:"SHT_MIPS_CONFLICT",
	0x70000003:"SHT_MIPS_GPTAB",
	0x70000004:"SHT_MIPS_UCODE",
	0x70000005:"SHT_MIPS_DEBUG",
	0x70000006:"SHT_MIPS_REGINFO",
	0x70000007:"SHT_MIPS_PACKAGE",
	0x70000008:"SHT_MIPS_PACKSYM",
	0x70000009:"SHT_MIPS_RELD",
	0x7000000b:"SHT_MIPS_IFACE",
	0x7000000c:"SHT_MIPS_CONTENT",
	0x7000000d:"SHT_MIPS_OPTIONS",
	0x70000010:"SHT_MIPS_SHDR",
	0x70000011:"SHT_MIPS_FDESC",
	0x70000012:"SHT_MIPS_EXTSYM",
	0x70000013:"SHT_MIPS_DENSE",
	0x70000014:"SHT_MIPS_PDESC",
	0x70000015:"SHT_MIPS_LOCSYM",
	0x70000016:"SHT_MIPS_AUXSYM",
	0x70000017:"SHT_MIPS_OPTSYM",
	0x70000018:"SHT_MIPS_LOCSTR",
	0x70000019:"SHT_MIPS_LINE",
	0x7000001a:"SHT_MIPS_RFDESC",
	0x7000001b:"SHT_MIPS_DELTASYM",
	0x7000001c:"SHT_MIPS_DELTAINST",
	0x7000001d:"SHT_MIPS_DELTACLASS",
	0x7000001e:"SHT_MIPS_DWARF",
	0x7000001f:"SHT_MIPS_DELTADECL",
	0x70000020:"SHT_MIPS_SYMBOL_LIB",
	0x70000021:"SHT_MIPS_EVENTS",
	0x70000022:"SHT_MIPS_TRANSLATE",
	0x70000023:"SHT_MIPS_PIXIE",
	0x70000024:"SHT_MIPS_XLATE",
	0x70000025:"SHT_MIPS_XLATE_DEBUG",
	0x70000026:"SHT_MIPS_WHIRL",
	0x70000027:"SHT_MIPS_EH_REGION",
	0x70000028:"SHT_MIPS_XLATE_OLD",
	0x70000029:"SHT_MIPS_PDR_EXCEPTION"
}
SH_FLAGS32_MIPS ={
	0x10000000:"SHF_MIPS_GPREL",
	0x20000000:"SHF_MIPS_MERGE",
	0x40000000:"SHF_MIPS_ADDR",
	0x80000000:"SHF_MIPS_STRINGS",
	0x08000000:"SHF_MIPS_NOSTRIP",
	0x04000000:"SHF_MIPS_LOCAL",
	0x02000000:"SHF_MIPS_NAMES",
	0x01000000:"SHF_MIPS_NODUPE",
}
ST_OTHER32_MIPS ={
	0x0:"STO_MIPS_DEFAULT",
	0x1:"STO_MIPS_INTERNAL",
	0x2:"STO_MIPS_HIDDEN",
	0x3:"STO_MIPS_PROTECTED",
	0xff:"STO_MIPS_SC_ALIGN_UNUSED"
}
ST_INFO_MIPS ={
	13:"STB_MIPS_SPLIT_COMMON"
}
ELF_OPTIONS_KIND ={
	0:"ODK_NULL",
	1:"ODK_REGINFO",
	2:"ODK_EXCEPTIONS",
	3:"ODK_PAD",
	4:"ODK_HWPATCH",
	5:"ODK_FILL",
	6:"ODK_TAGS",
	7:"ODK_HWAND",
	8:"ODK_HWOR"
}
ELF_OPTIONS_INFO ={
	0x1f:"OEX_FPU_MIN",
	0x1f00:"OEX_FPU_MAX",
	0x10000:"OEX_PAGE0",
	0x20000:"OEX_SMM",
	0x40000:"OEX_FPDBUG",
	0x40000:"OEX_PRECISEFP",
	0x80000:"OEX_DISMISS",
	0x10:"OEX_FPU_INVAL",
	0x08:"OEX_FPU_DIV0",
	0x04:"OEX_FPU_OFLO",
	0x02:"OEX_FPU_UFLO",
	0x01:"OEX_FPU_INEX",
	0x1:"OHW_R4KEOP",
	0x2:"OHW_R8KPFETCH",
	0x4:"OHW_R5KEOP",
	0x8:"OHW_R5KCVTL",
	0x1:"OPAD_PREFIX",
	0x2:"OPAD_POSTFIX",
	0x4:"OPAD_SYMBOL"
}
ELF_OPTIONS_HW ={
	0x00000001:"OHWA0_R4KEOP_CHECKED",
	0x00000002:"OHWA1_R4KEOP_CLEAN"
}
MIPS_RELOCS ={
	0:"R_MIPS_NONE",
	1:"R_MIPS_16",
	2:"R_MIPS_32",
	3:"R_MIPS_REL32",
	4:"R_MIPS_26",
	5:"R_MIPS_HI16",
	6:"R_MIPS_LO16",
	7:"R_MIPS_GPREL16",
	8:"R_MIPS_LITERAL",
	9:"R_MIPS_GOT16",
	10:"R_MIPS_PC16",
	11:"R_MIPS_CALL16",
	12:"R_MIPS_GPREL32",
	16:"R_MIPS_SHIFT5",
	17:"R_MIPS_SHIFT6",
	18:"R_MIPS_64",
	19:"R_MIPS_GOT_DISP",
	20:"R_MIPS_GOT_PAGE",
	21:"R_MIPS_GOT_OFST",
	22:"R_MIPS_GOT_HI16",
	23:"R_MIPS_GOT_LO16",
	24:"R_MIPS_SUB",
	25:"R_MIPS_INSERT_A",
	26:"R_MIPS_INSERT_B",
	27:"R_MIPS_DELETE",
	28:"R_MIPS_HIGHER",
	29:"R_MIPS_HIGHEST",
	30:"R_MIPS_CALL_HI16",
	31:"R_MIPS_CALL_LO16",
	32:"R_MIPS_SCN_DISP",
	33:"R_MIPS_REL16",
	34:"R_MIPS_ADD_IMMEDIATE",
	35:"R_MIPS_PJUMP",
	36:"R_MIPS_RELGOT",
	37:"R_MIPS_JALR",
	38:"R_MIPS_TLS_DTPMOD32",
	39:"R_MIPS_TLS_DTPREL32",
	40:"R_MIPS_TLS_DTPMOD64",
	41:"R_MIPS_TLS_DTPREL64",
	42:"R_MIPS_TLS_GD",
	43:"R_MIPS_TLS_LDM",
	44:"R_MIPS_TLS_DTPREL_HI16",
	45:"R_MIPS_TLS_DTPREL_LO16",
	46:"R_MIPS_TLS_GOTTPREL",
	47:"R_MIPS_TLS_TPREL32",
	48:"R_MIPS_TLS_TPREL64",
	49:"R_MIPS_TLS_TPREL_HI16",
	50:"R_MIPS_TLS_TPREL_LO16",
	51:"R_MIPS_NUM"
}
R_MIPS_NUM = 51
MIPS_P_TYPE ={
	0x70000000:"PT_MIPS_REGINFO",
	0x70000001:"PT_MIPS_RTPROC",
	0x70000002:"PT_MIPS_OPTIONS"
}
MIPS_P_FLAGS ={
	0x10000000:"PF_MIPS_LOCAL"
}
MIPS_DTAG32 = {
	0x70000001:"DT_MIPS_RLD_VERSION",
	0x70000002:"DT_MIPS_TIME_STAMP",
	0x70000003:"DT_MIPS_ICHECKSUM",
	0x70000004:"DT_MIPS_IVERSION",
	0x70000005:"DT_MIPS_FLAGS",
	0x70000006:"DT_MIPS_BASE_ADDRESS",
	0x70000007:"DT_MIPS_MSYM",
	0x70000008:"DT_MIPS_CONFLICT",
	0x70000009:"DT_MIPS_LIBLIST",
	0x7000000a:"DT_MIPS_LOCAL_GOTNO",
	0x7000000b:"DT_MIPS_CONFLICTNO",
	0x70000010:"DT_MIPS_LIBLISTNO",
	0x70000011:"DT_MIPS_SYMTABNO",
	0x70000012:"DT_MIPS_UNREFEXTNO",
	0x70000013:"DT_MIPS_GOTSYM",
	0x70000014:"DT_MIPS_HIPAGENO",
	0x70000016:"DT_MIPS_RLD_MAP",
	0x70000017:"DT_MIPS_DELTA_CLASS",
	0x70000018:"DT_MIPS_DELTA_CLASS_NO",
	0x70000019:"DT_MIPS_DELTA_INSTANCE",
	0x7000001a:"DT_MIPS_DELTA_INSTANCE_NO",
	0x7000001b:"DT_MIPS_DELTA_RELOC",
	0x7000001c:"DT_MIPS_DELTA_RELOC_NO",
	0x7000001d:"DT_MIPS_DELTA_SYM",
	0x7000001e:"DT_MIPS_DELTA_SYM_NO",
	0x70000020:"DT_MIPS_DELTA_CLASSSYM",
	0x70000021:"DT_MIPS_DELTA_CLASSSYM_NO",
	0x70000022:"DT_MIPS_CXX_FLAGS",
	0x70000023:"DT_MIPS_PIXIE_INIT",
	0x70000024:"DT_MIPS_SYMBOL_LIB",
	0x70000025:"DT_MIPS_LOCALPAGE_GOTIDX",
	0x70000026:"DT_MIPS_LOCAL_GOTIDX",
	0x70000027:"DT_MIPS_HIDDEN_GOTIDX",
	0x70000028:"DT_MIPS_PROTECTED_GOTIDX",
	0x70000029:"DT_MIPS_OPTIONS",
	0x7000002a:"DT_MIPS_INTERFACE",
	0x7000002b:"DT_MIPS_DYNSTR_ALIGN",
	0x7000002c:"DT_MIPS_INTERFACE_SIZE",
	0x7000002d:"DT_MIPS_RLD_TEXT_RESOLVE_ADDR",
	0x7000002e:"DT_MIPS_PERF_SUFFIX",
	0x7000002f:"DT_MIPS_COMPACT_SIZE",
	0x70000030:"DT_MIPS_GP_VALUE",
	0x70000031:"DT_MIPS_AUX_DYNAMIC",
	0x32:"DT_MIPS_NUM"
}
DT_MIPS_NUM = 0x32
MIPS_DT_FLAGS ={
	0:"RHF_NONE",
	0x1:"RHF_NO_MOVE",
	0x2:"RHF_SGI_ONLY",
	0x4:"RHF_GUARANTEE_INIT",
	0x8:"RHF_DELTA_C_PLUS_PLUS",
	0x10:"RHF_GUARANTEE_START_INIT",
	0x20:"RHF_PIXIE",
	0x40:"RHF_DEFAULT_DELAY_LOAD",
	0x80:"RHF_REQUICKSTART",
	0x100:"RHF_REQUICKSTARTED",
	0x200:"RHF_CORD",
	0x400:"RHF_NO_UNRES_UNDEF",
	0x800:"RHF_RLD_ORDER_SAFE"
}
PARISC_L_FLAGS ={
	0:"LL_NONE",
	0x1:"LL_EXACT_MATCH",
	0x2:"LL_IGNORE_INT_VER",
	0x4:"LL_REQUIRE_MINOR",
	0x8:"LL_EXPORTS",
	0x10:"LL_DELAY_LOAD",
	0x20:"LL_DELTA"
}
PARISC_E_FLAGS = {
	0x00010000:"EF_PARISC_TRAPNIL",
	0x00020000:"EF_PARISC_EXT",
	0x00040000:"EF_PARISC_LSB",
	0x00080000:"EF_PARISC_WIDE",
	0x00100000:"EF_PARISC_NO_KABP",
	0x00400000:"EF_PARISC_LAZYSWAP",
	0x0000ffff:"EF_PARISC_ARCH",
	0x020b:"EFA_PARISC_1_0",
	0x0210:"EFA_PARISC_1_1",
	0x0214:"EFA_PARISC_2_0",
}
PARISC_SHN_INDICES ={
	0xff00:"SHN_PARISC_ANSI_COMMON",
	0xff01:"SHN_PARISC_HUGE_COMMON"
}
PARISC_SH_TYPE ={
	0x70000000:"SHT_PARISC_EXT",
	0x70000001:"SHT_PARISC_UNWIND",
	0x70000002:"SHT_PARISC_DOC"
}

PARISC_SH_FLAGS={
	0x20000000:"SHF_PARISC_SHORT",
	0x40000000:"SHF_PARISC_HUGE",
	0x80000000:"SHF_PARISC_SBP"
}
PARISC_ST_TYPE ={
	13:"STT_PARISC_MILLICODE",
	11:"STT_HP_OPAQUE",
	12:"STT_HP_STUB"
}
PARISC_RELOCS ={
	0:"R_PARISC_NONE",
	1:"R_PARISC_DIR32",
	2:"R_PARISC_DIR21L",
	3:"R_PARISC_DIR17R",
	4:"R_PARISC_DIR17F",
	6:"R_PARISC_DIR14R",
	9:"R_PARISC_PCREL32",
	10:"R_PARISC_PCREL21L",
	11:"R_PARISC_PCREL17R",
	12:"R_PARISC_PCREL17F",
	14:"R_PARISC_PCREL14R",
	18:"R_PARISC_DPREL21L",
	22:"R_PARISC_DPREL14R",
	26:"R_PARISC_GPREL21L",
	30:"R_PARISC_GPREL14R",
	34:"R_PARISC_LTOFF21L",
	38:"R_PARISC_LTOFF14R",
	41:"R_PARISC_SECREL32",
	48:"R_PARISC_SEGBASE",
	49:"R_PARISC_SEGREL32",
	50:"R_PARISC_PLTOFF21L",
	54:"R_PARISC_PLTOFF14R",
	57:"R_PARISC_LTOFF_FPTR32",
	58:"R_PARISC_LTOFF_FPTR21L",
	62:"R_PARISC_LTOFF_FPTR14R",
	64:"R_PARISC_FPTR64",
	65:"R_PARISC_PLABEL32",
	66:"R_PARISC_PLABEL21L",
	70:"R_PARISC_PLABEL14R",
	72:"R_PARISC_PCREL64",
	74:"R_PARISC_PCREL22F",
	75:"R_PARISC_PCREL14WR",
	76:"R_PARISC_PCREL14DR",
	77:"R_PARISC_PCREL16F",
	78:"R_PARISC_PCREL16WF",
	79:"R_PARISC_PCREL16DF",
	80:"R_PARISC_DIR64",
	83:"R_PARISC_DIR14WR",
	84:"R_PARISC_DIR14DR",
	85:"R_PARISC_DIR16F",
	86:"R_PARISC_DIR16WF",
	87:"R_PARISC_DIR16DF",
	88:"R_PARISC_GPREL64",
	91:"R_PARISC_GPREL14WR",
	92:"R_PARISC_GPREL14DR",
	93:"R_PARISC_GPREL16F",
	94:"R_PARISC_GPREL16WF",
	95:"R_PARISC_GPREL16DF",
	96:"R_PARISC_LTOFF64",
	99:"R_PARISC_LTOFF14WR",
	100:"R_PARISC_LTOFF14DR",
	101:"R_PARISC_LTOFF16F",
	102:"R_PARISC_LTOFF16WF",
	103:"R_PARISC_LTOFF16DF",
	104:"R_PARISC_SECREL64",
	112:"R_PARISC_SEGREL64",
	115:"R_PARISC_PLTOFF14WR",
	116:"R_PARISC_PLTOFF14DR",
	117:"R_PARISC_PLTOFF16F",
	118:"R_PARISC_PLTOFF16WF",
	119:"R_PARISC_PLTOFF16DF",
	120:"R_PARISC_LTOFF_FPTR64",
	123:"R_PARISC_LTOFF_FPTR14WR",
	124:"R_PARISC_LTOFF_FPTR14DR",
	125:"R_PARISC_LTOFF_FPTR16F",
	126:"R_PARISC_LTOFF_FPTR16WF",
	127:"R_PARISC_LTOFF_FPTR16DF",
	128:"R_PARISC_LORESERVE",
	128:"R_PARISC_COPY",
	129:"R_PARISC_IPLT",
	130:"R_PARISC_EPLT",
	153:"R_PARISC_TPREL32",
	154:"R_PARISC_TPREL21L",
	158:"R_PARISC_TPREL14R",
	162:"R_PARISC_LTOFF_TP21L",
	166:"R_PARISC_LTOFF_TP14R",
	167:"R_PARISC_LTOFF_TP14F",
	216:"R_PARISC_TPREL64",
	219:"R_PARISC_TPREL14WR",
	220:"R_PARISC_TPREL14DR",
	221:"R_PARISC_TPREL16F",
	222:"R_PARISC_TPREL16WF",
	223:"R_PARISC_TPREL16DF",
	224:"R_PARISC_LTOFF_TP64",
	227:"R_PARISC_LTOFF_TP14WR",
	228:"R_PARISC_LTOFF_TP14DR",
	229:"R_PARISC_LTOFF_TP16F",
	230:"R_PARISC_LTOFF_TP16WF",
	231:"R_PARISC_LTOFF_TP16DF",
	232:"R_PARISC_GNU_VTENTRY",
	233:"R_PARISC_GNU_VTINHERIT",
	234:"R_PARISC_TLS_GD21L",
	235:"R_PARISC_TLS_GD14R",
	236:"R_PARISC_TLS_GDCALL",
	237:"R_PARISC_TLS_LDM21L",
	238:"R_PARISC_TLS_LDM14R",
	239:"R_PARISC_TLS_LDMCALL",
	240:"R_PARISC_TLS_LDO21L",
	241:"R_PARISC_TLS_LDO14R",
	242:"R_PARISC_TLS_DTPMOD32",
	243:"R_PARISC_TLS_DTPMOD64",
	244:"R_PARISC_TLS_DTPOFF32",
	245:"R_PARISC_TLS_DTPOFF64",
	255:"R_PARISC_HIRESERVE"
}

PARISC_RELOCS_ADDL ={
	154:"R_PARISC_TLS_LE21L",
	158:"R_PARISC_TLS_LE14R",
	162:"R_PARISC_TLS_IE21L",
	166:"R_PARISC_TLS_IE14R",
	153:"R_PARISC_TLS_TPREL32",
	216:"R_PARISC_TLS_TPREL64"
}
PARISC_P_TYPE ={
	0x60000000:"PT_HP_TLS",
	0x60000001:"PT_HP_CORE_NONE",
	0x60000002:"PT_HP_CORE_VERSION",
	0x60000003:"PT_HP_CORE_KERNEL",
	0x60000004:"PT_HP_CORE_COMM",
	0x60000005:"PT_HP_CORE_PROC",
	0x60000006:"PT_HP_CORE_LOADABLE",
	0x60000007:"PT_HP_CORE_STACK",
	0x60000008:"PT_HP_CORE_SHM",
	0x60000009:"PT_HP_CORE_MMF",
	0x60000010:"PT_HP_PARALLEL",
	0x60000011:"PT_HP_FASTBIND",
	0x60000012:"PT_HP_OPT_ANNOT",
	0x60000013:"PT_HP_HSL_ANNOT",
	0x60000014:"PT_HP_STACK",
	0x70000000:"PT_PARISC_ARCHEXT",
	0x70000001:"PT_PARISC_UNWIND",
}
PARISC_P_FLAGS = {
	0x08000000:"PF_PARISC_SBP",
	0x00100000:"PF_HP_PAGE_SIZE",
	0x00200000:"PF_HP_FAR_SHARED",
	0x00400000:"PF_HP_NEAR_SHARED",
	0x01000000:"PF_HP_CODE",
	0x02000000:"PF_HP_MODIFY",
	0x04000000:"PF_HP_LAZYSWAP",
	0x08000000:"PF_HP_SBP"
}
ALPHA_E_FLAGS ={
	1:"EF_ALPHA_32BIT",
	2:"EF_ALPHA_CANRELAX"
}
ALPHA_SH_TYPE ={
	0x70000001:"SHT_ALPHA_DEBUG",
	0x70000002:"SHT_ALPHA_REGINFO"
}
ALPHA_SH_FLAGS = {
	0x10000000:"SHF_ALPHA_GPREL"
}
ALPHA_ST_OTHER = {
	0x80:"STO_ALPHA_NOPV",
	0x88:"STO_ALPHA_STD_GPLOAD"
}
ALPHA_RELOCS = {
	0:"R_ALPHA_NONE",
	1:"R_ALPHA_REFLONG",
	2:"R_ALPHA_REFQUAD",
	3:"R_ALPHA_GPREL32",
	4:"R_ALPHA_LITERAL",
	5:"R_ALPHA_LITUSE",
	6:"R_ALPHA_GPDISP",
	7:"R_ALPHA_BRADDR",
	8:"R_ALPHA_HINT",
	9:"R_ALPHA_SREL16",
	10:"R_ALPHA_SREL32",
	11:"R_ALPHA_SREL64",
	17:"R_ALPHA_GPRELHIGH",
	18:"R_ALPHA_GPRELLOW",
	19:"R_ALPHA_GPREL16",
	24:"R_ALPHA_COPY",
	25:"R_ALPHA_GLOB_DAT",
	26:"R_ALPHA_JMP_SLOT",
	27:"R_ALPHA_RELATIVE",
	28:"R_ALPHA_TLS_GD_HI",
	29:"R_ALPHA_TLSGD",
	30:"R_ALPHA_TLS_LDM",
	31:"R_ALPHA_DTPMOD64",
	32:"R_ALPHA_GOTDTPREL",
	33:"R_ALPHA_DTPREL64",
	34:"R_ALPHA_DTPRELHI",
	35:"R_ALPHA_DTPRELLO",
	36:"R_ALPHA_DTPREL16",
	37:"R_ALPHA_GOTTPREL",
	38:"R_ALPHA_TPREL64",
	39:"R_ALPHA_TPRELHI",
	40:"R_ALPHA_TPRELLO",
	41:"R_ALPHA_TPREL16",
	46:"R_ALPHA_NUM",
}
R_ALPHA_NUM = 46
ALPHA_LITUSE ={
	0:"LITUSE_ALPHA_ADDR",
	1:"LITUSE_ALPHA_BASE",
	2:"LITUSE_ALPHA_BYTOFF",
	3:"LITUSE_ALPHA_JSR",
	4:"LITUSE_ALPHA_TLS_GD",
	5:"LITUSE_ALPHA_TLS_LDM"
}
ALPHA_DTAG = {
0x070000000:"DT_ALPHA_PLTRO",
  1:"DT_ALPHA_NUM"
}
DT_ALPHA_NUM = 1
PPC_E_FLAGS ={
  0x80000000:"EF_PPC_EMB",
  0x00010000:"EF_PPC_RELOCATABLE",
	0x00008000:"EF_PPC_RELOCATABLE_LIB"
}
PPC_D_TAG ={
	0x70000000:"DT_PPC_GOT",
	1:"DT_PPC_NUM"
}
DT_PPC_NUM = 1
PPC_RELOCS ={
	0:"R_PPC_NONE",
	1:"R_PPC_ADDR32",
	2:"R_PPC_ADDR24",
	3:"R_PPC_ADDR16",
	4:"R_PPC_ADDR16_LO",
	5:"R_PPC_ADDR16_HI",
	6:"R_PPC_ADDR16_HA",
	7:"R_PPC_ADDR14",
	8:"R_PPC_ADDR14_BRTAKEN",
	9:"R_PPC_ADDR14_BRNTAKEN",
	10:"R_PPC_REL24",
	11:"R_PPC_REL14",
	12:"R_PPC_REL14_BRTAKEN",
	13:"R_PPC_REL14_BRNTAKEN",
	14:"R_PPC_GOT16",
	15:"R_PPC_GOT16_LO",
	16:"R_PPC_GOT16_HI",
	17:"R_PPC_GOT16_HA",
	18:"R_PPC_PLTREL24",
	19:"R_PPC_COPY",
	20:"R_PPC_GLOB_DAT",
	21:"R_PPC_JMP_SLOT",
	22:"R_PPC_RELATIVE",
	23:"R_PPC_LOCAL24PC",
	24:"R_PPC_UADDR32",
	25:"R_PPC_UADDR16",
	26:"R_PPC_REL32",
	27:"R_PPC_PLT32",
	28:"R_PPC_PLTREL32",
	29:"R_PPC_PLT16_LO",
	30:"R_PPC_PLT16_HI",
	31:"R_PPC_PLT16_HA",
	32:"R_PPC_SDAREL16",
	33:"R_PPC_SECTOFF",
	34:"R_PPC_SECTOFF_LO",
	35:"R_PPC_SECTOFF_HI",
	36:"R_PPC_SECTOFF_HA",
	67:"R_PPC_TLS",
	68:"R_PPC_DTPMOD32",
	69:"R_PPC_TPREL16",
	70:"R_PPC_TPREL16_LO",
	71:"R_PPC_TPREL16_HI",
	72:"R_PPC_TPREL16_HA",
	73:"R_PPC_TPREL32",
	74:"R_PPC_DTPREL16",
	75:"R_PPC_DTPREL16_LO",
	76:"R_PPC_DTPREL16_HI",
	77:"R_PPC_DTPREL16_HA",
	78:"R_PPC_DTPREL32",
	79:"R_PPC_GOT_TLSGD16",
	80:"R_PPC_GOT_TLSGD16_LO",
	81:"R_PPC_GOT_TLSGD16_HI",
	82:"R_PPC_GOT_TLSGD16_HA",
	83:"R_PPC_GOT_TLSLD16",
	84:"R_PPC_GOT_TLSLD16_LO",
	85:"R_PPC_GOT_TLSLD16_HI",
	86:"R_PPC_GOT_TLSLD16_HA",
	87:"R_PPC_GOT_TPREL16",
	88:"R_PPC_GOT_TPREL16_LO",
	89:"R_PPC_GOT_TPREL16_HI",
	90:"R_PPC_GOT_TPREL16_HA",
	91:"R_PPC_GOT_DTPREL16",
	92:"R_PPC_GOT_DTPREL16_LO",
	93:"R_PPC_GOT_DTPREL16_HI",
	94:"R_PPC_GOT_DTPREL16_HA",
	95:"R_PPC_NUM",
	101:"R_PPC_EMB_NADDR32",
	102:"R_PPC_EMB_NADDR16",
	103:"R_PPC_EMB_NADDR16_LO",
	104:"R_PPC_EMB_NADDR16_HI",
	105:"R_PPC_EMB_NADDR16_HA",
	106:"R_PPC_EMB_SDAI16",
	107:"R_PPC_EMB_SDA2I16",
	108:"R_PPC_EMB_SDA2REL",
	109:"R_PPC_EMB_SDA21",
	110:"R_PPC_EMB_MRKREF",
	111:"R_PPC_EMB_RELSEC16",
	112:"R_PPC_EMB_RELST_LO",
	113:"R_PPC_EMB_RELST_HI",
	114:"R_PPC_EMB_RELST_HA",
	115:"R_PPC_EMB_BIT_FLD",
	116:"R_PPC_EMB_RELSDA",
	180:"R_PPC_DIAB_SDA21_LO",
	181:"R_PPC_DIAB_SDA21_HI",
	182:"R_PPC_DIAB_SDA21_HA",
	183:"R_PPC_DIAB_RELSDA_LO",
	184:"R_PPC_DIAB_RELSDA_HI",
	185:"R_PPC_DIAB_RELSDA_HA",
	249:"R_PPC_REL16",
	250:"R_PPC_REL16_LO",
	251:"R_PPC_REL16_HI",
	252:"R_PPC_REL16_HA",
	255:"R_PPC_TOC16",
}
R_PPC_NUM = 95

PPC64_RELOCS ={
	0:"R_PPC64_NONE",
	1:"R_PPC64_ADDR32",
	2:"R_PPC64_ADDR24",
	3:"R_PPC64_ADDR16",
	4:"R_PPC64_ADDR16_LO",
	5:"R_PPC64_ADDR16_HI",
	6:"R_PPC64_ADDR16_HA",
	7:"R_PPC64_ADDR14",
	8:"R_PPC64_ADDR14_BRTAKEN",
	9:"R_PPC64_ADDR14_BRNTAKEN",
	10:"R_PPC64_REL24",
	11:"R_PPC64_REL14",
	12:"R_PPC64_REL14_BRTAKEN",
	13:"R_PPC64_REL14_BRNTAKEN",
	14:"R_PPC64_GOT16",
	15:"R_PPC64_GOT16_LO",
	16:"R_PPC64_GOT16_HI",
	17:"R_PPC64_GOT16_HA",
	19:"R_PPC64_COPY",
	20:"R_PPC64_GLOB_DAT",
	21:"R_PPC64_JMP_SLOT",
	22:"R_PPC64_RELATIVE",
	24:"R_PPC64_UADDR32",
	25:"R_PPC64_UADDR16",
	26:"R_PPC64_REL32",
	27:"R_PPC64_PLT32",
	28:"R_PPC64_PLTREL32",
	29:"R_PPC64_PLT16_LO",
	30:"R_PPC64_PLT16_HI",
	32:"R_PPC64_PLT16_HA",
	33:"R_PPC64_SECTOFF",
	34:"R_PPC64_SECTOFF_LO",
	35:"R_PPC64_SECTOFF_HI",
	36:"R_PPC64_SECTOFF_HA",
	37:"R_PPC64_ADDR30",
	38:"R_PPC64_ADDR64",
	39:"R_PPC64_ADDR16_HIGHER",
	40:"R_PPC64_ADDR16_HIGHERA",
	41:"R_PPC64_ADDR16_HIGHEST",
	42:"R_PPC64_ADDR16_HIGHESTA",
	43:"R_PPC64_UADDR64",
	44:"R_PPC64_REL64",
	45:"R_PPC64_PLT64",
	46:"R_PPC64_PLTREL64",
	47:"R_PPC64_TOC16",
	48:"R_PPC64_TOC16_LO",
	49:"R_PPC64_TOC16_HI",
	50:"R_PPC64_TOC16_HA",
	51:"R_PPC64_TOC",
	52:"R_PPC64_PLTGOT16",
	53:"R_PPC64_PLTGOT16_LO",
	54:"R_PPC64_PLTGOT16_HI",
	55:"R_PPC64_PLTGOT16_HA",
	56:"R_PPC64_ADDR16_DS",
	57:"R_PPC64_ADDR16_LO_DS",
	58:"R_PPC64_GOT16_DS",
	59:"R_PPC64_GOT16_LO_DS",
	60:"R_PPC64_PLT16_LO_DS",
	61:"R_PPC64_SECTOFF_DS",
	62:"R_PPC64_SECTOFF_LO_DS",
	63:"R_PPC64_TOC16_DS",
	64:"R_PPC64_TOC16_LO_DS",
	65:"R_PPC64_PLTGOT16_DS",
	66:"R_PPC64_PLTGOT16_LO_DS",
	67:"R_PPC64_TLS",
	68:"R_PPC64_DTPMOD64",
	69:"R_PPC64_TPREL16",
	70:"R_PPC64_TPREL16_LO",
	71:"R_PPC64_TPREL16_HI",
	72:"R_PPC64_TPREL16_HA",
	73:"R_PPC64_TPREL64",
	74:"R_PPC64_DTPREL16",
	75:"R_PPC64_DTPREL16_LO",
	76:"R_PPC64_DTPREL16_HI",
	77:"R_PPC64_DTPREL16_HA",
	78:"R_PPC64_DTPREL64",
	79:"R_PPC64_GOT_TLSGD16",
	80:"R_PPC64_GOT_TLSGD16_LO",
	81:"R_PPC64_GOT_TLSGD16_HI",
	82:"R_PPC64_GOT_TLSGD16_HA",
	83:"R_PPC64_GOT_TLSLD16",
	84:"R_PPC64_GOT_TLSLD16_LO",
	85:"R_PPC64_GOT_TLSLD16_HI",
	86:"R_PPC64_GOT_TLSLD16_HA",
	87:"R_PPC64_GOT_TPREL16_DS",
	88:"R_PPC64_GOT_TPREL16_LO_DS",
	89:"R_PPC64_GOT_TPREL16_HI",
	90:"R_PPC64_GOT_TPREL16_HA",
	91:"R_PPC64_GOT_DTPREL16_DS",
	92:"R_PPC64_GOT_DTPREL16_LO_DS",
	93:"R_PPC64_GOT_DTPREL16_HI",
	94:"R_PPC64_GOT_DTPREL16_HA",
	95:"R_PPC64_TPREL16_DS",
	96:"R_PPC64_TPREL16_LO_DS",
	97:"R_PPC64_TPREL16_HIGHER",
	98:"R_PPC64_TPREL16_HIGHERA",
	99:"R_PPC64_TPREL16_HIGHEST",
	100:"R_PPC64_TPREL16_HIGHESTA",
	101:"R_PPC64_DTPREL16_DS",
	102:"R_PPC64_DTPREL16_LO_DS",
	103:"R_PPC64_DTPREL16_HIGHER",
	104:"R_PPC64_DTPREL16_HIGHERA",
	105:"R_PPC64_DTPREL16_HIGHEST",
	106:"R_PPC64_DTPREL16_HIGHESTA",
	107:"R_PPC64_NUM"
}
R_PPC64_NUM = 107

PPC64_D_TAG ={
	0x70000000:"DT_PPC64_GLINK",
	0x70000001:"DT_PPC64_OPD",
	0x70000002:"DT_PPC64_OPDSZ",
	3:"DT_ALPHA_NUM"
}
DT_PPC64_NUM = 3

ARM_E_FLAGS = {
	0x01:"EF_ARM_RELEXEC",
	0x02:"EF_ARM_HASENTRY",
	0x04:"EF_ARM_INTERWORK",
	0x08:"EF_ARM_APCS_26",
	0x10:"EF_ARM_APCS_FLOAT",
	0x20:"EF_ARM_PIC",
	0x40:"EF_ARM_ALIGN8",
	0x80:"EF_ARM_NEW_ABI",
	0x100:"EF_ARM_OLD_ABI",
	0x04:"EF_ARM_SYMSARESORTED",
	0x08:"EF_ARM_DYNSYMSUSESEGIDX",
	0x10:"EF_ARM_MAPSYMSFIRST",
	0XFF000000:"EF_ARM_EABIMASK",
	0x00000000:"EF_ARM_EABI_UNKNOWN",
	0x01000000:"EF_ARM_EABI_VER1",
	0x02000000:"EF_ARM_EABI_VER2"
}
def EF_ARM_EABI_VERSION(flags):
	return ((flags) & 0XFF000000)
ARM_ST_TYPE = {
	0xd:"STT_ARM_TFUNC"
}
ARM_SH_FLAGS = {
	0x10000000:"SHF_ARM_ENTRYSECT",
	0x80000000:"SHF_ARM_COMDEF"
}	
ARM_P_FLAGS = {
	0x10000000:"PF_ARM_SB"
}
ARM_P_TYPE = {
	0x70000001:"PT_ARM_EXIDX"
}
ARM_RELOC = {
	0:"R_ARM_NONE",
	1:"R_ARM_PC24",
	2:"R_ARM_ABS32",
	3:"R_ARM_REL32",
	4:"R_ARM_PC13",
	5:"R_ARM_ABS16",
	6:"R_ARM_ABS12",
	7:"R_ARM_THM_ABS5",
	8:"R_ARM_ABS8",
	9:"R_ARM_SBREL32",
	10:"R_ARM_THM_PC22",
	11:"R_ARM_THM_PC8",
	12:"R_ARM_AMP_VCALL9",
	13:"R_ARM_SWI24",
	14:"R_ARM_THM_SWI8",
	15:"R_ARM_XPC25",
	16:"R_ARM_THM_XPC22",
	17:"R_ARM_TLS_DTPMOD32",
	18:"R_ARM_TLS_DTPOFF32",
	19:"R_ARM_TLS_TPOFF32",
	20:"R_ARM_COPY",
	21:"R_ARM_GLOB_DAT",
	22:"R_ARM_JUMP_SLOT",
	23:"R_ARM_RELATIVE",
	24:"R_ARM_GOTOFF",
	25:"R_ARM_GOTPC",
	26:"R_ARM_GOT32",
	27:"R_ARM_PLT32",
	32:"R_ARM_ALU_PCREL_7_0",
	33:"R_ARM_ALU_PCREL_15_8",
	34:"R_ARM_ALU_PCREL_23_15",
	35:"R_ARM_LDR_SBREL_11_0",
	36:"R_ARM_ALU_SBREL_19_12",
	37:"R_ARM_ALU_SBREL_27_20",
	100:"R_ARM_GNU_VTENTRY",
	101:"R_ARM_GNU_VTINHERIT",
	102:"R_ARM_THM_PC11",
	103:"R_ARM_THM_PC9",
	104:"R_ARM_TLS_GD32",
	105:"R_ARM_TLS_LDM32",
	106:"R_ARM_TLS_LDO32",
	107:"R_ARM_TLS_IE32",
	108:"R_ARM_TLS_LE32",
	249:"R_ARM_RXPC25",
	250:"R_ARM_RSBREL32",
	251:"R_ARM_THM_RPC22",
	252:"R_ARM_RREL32",
	253:"R_ARM_RABS22",
	254:"R_ARM_RPC24",
	255:"R_ARM_RBASE",
	256:"R_ARM_NUM"
}
R_ARM_NUM = 256

IA64_E_FLAGS = {
	0x0000000f:"EF_IA_64_MASKOS",
	0x00000010:"EF_IA_64_ABI64",
	0xff000000:"EF_IA_64_ARCH"
}
IA64_P_TYPE ={
	0x70000000:"PT_IA_64_HP_ARCHEXT",
	0x70000001:"PT_IA_64_HP_UNWIND",
	0x60000012:"PT_IA_64_HP_HSL_ANOT",
	0x60000013:"PT_IA_64_HP_HSL_ANOT",
	0x60000014:"PT_IA_64_HP_STACK",
	0x80000000:"PF_IA_64_NORECOV",
}
IA64_SH_FLAGS ={
	0x10000000:"SHF_IA_64_SHORT",
	0x20000000:"SHF_IA_64_NORECOV"
}
IA64_D_TAG = {
	0x70000000:"DT_IA_64_PLT_RESERVE",
	1:"DT_IA_64_NUM"
}
DT_IA_64_NUM = 1
IA64_RELOCS = {
	0x00:"R_IA64_NONE",
	0x21:"R_IA64_IMM14",
	0x22:"R_IA64_IMM22",
	0x23:"R_IA64_IMM64",
	0x24:"R_IA64_DIR32MSB",
	0x25:"R_IA64_DIR32LSB",
	0x26:"R_IA64_DIR64MSB",
	0x27:"R_IA64_DIR64LSB",
	0x2a:"R_IA64_GPREL22",
	0x2b:"R_IA64_GPREL64I",
	0x2c:"R_IA64_GPREL32MSB",
	0x2d:"R_IA64_GPREL32LSB",
	0x2e:"R_IA64_GPREL64MSB",
	0x2f:"R_IA64_GPREL64LSB",
	0x32:"R_IA64_LTOFF22",
	0x33:"R_IA64_LTOFF64I",
	0x3a:"R_IA64_PLTOFF22",
	0x3b:"R_IA64_PLTOFF64I",
	0x3e:"R_IA64_PLTOFF64MSB",
	0x3f:"R_IA64_PLTOFF64LSB",
	0x43:"R_IA64_FPTR64I",
	0x44:"R_IA64_FPTR32MSB",
	0x45:"R_IA64_FPTR32LSB",
	0x46:"R_IA64_FPTR64MSB",
	0x47:"R_IA64_FPTR64LSB",
	0x48:"R_IA64_PCREL60B",
	0x49:"R_IA64_PCREL21B",
	0x4a:"R_IA64_PCREL21M",
	0x4b:"R_IA64_PCREL21F",
	0x4c:"R_IA64_PCREL32MSB",
	0x4d:"R_IA64_PCREL32LSB",
	0x4e:"R_IA64_PCREL64MSB",
	0x4f:"R_IA64_PCREL64LSB",
	0x52:"R_IA64_LTOFF_FPTR22",
	0x53:"R_IA64_LTOFF_FPTR64I",
	0x54:"R_IA64_LTOFF_FPTR32MSB",
	0x55:"R_IA64_LTOFF_FPTR32LSB",
	0x56:"R_IA64_LTOFF_FPTR64MSB",
	0x57:"R_IA64_LTOFF_FPTR64LSB",
	0x5c:"R_IA64_SEGREL32MSB",
	0x5d:"R_IA64_SEGREL32LSB",
	0x5e:"R_IA64_SEGREL64MSB",
	0x5f:"R_IA64_SEGREL64LSB",
	0x64:"R_IA64_SECREL32MSB",
	0x65:"R_IA64_SECREL32LSB",
	0x66:"R_IA64_SECREL64MSB",
	0x67:"R_IA64_SECREL64LSB",
	0x6c:"R_IA64_REL32MSB",
	0x6d:"R_IA64_REL32LSB",
	0x6e:"R_IA64_REL64MSB",
	0x6f:"R_IA64_REL64LSB",
	0x74:"R_IA64_LTV32MSB",
	0x75:"R_IA64_LTV32LSB",
	0x76:"R_IA64_LTV64MSB",
	0x77:"R_IA64_LTV64LSB",
	0x79:"R_IA64_PCREL21BI",
	0x7a:"R_IA64_PCREL22",
	0x7b:"R_IA64_PCREL64I",
	0x80:"R_IA64_IPLTMSB",
	0x81:"R_IA64_IPLTLSB",
	0x84:"R_IA64_COPY",
	0x85:"R_IA64_SUB",
	0x86:"R_IA64_LTOFF22X",
	0x87:"R_IA64_LDXMOV",
	0x91:"R_IA64_TPREL14",
	0x92:"R_IA64_TPREL22",
	0x93:"R_IA64_TPREL64I",
	0x96:"R_IA64_TPREL64MSB",
	0x97:"R_IA64_TPREL64LSB",
	0x9a:"R_IA64_LTOFF_TPREL22",
	0xa6:"R_IA64_DTPMOD64MSB",
	0xa7:"R_IA64_DTPMOD64LSB",
	0xaa:"R_IA64_LTOFF_DTPMOD22",
	0xb1:"R_IA64_DTPREL14",
	0xb2:"R_IA64_DTPREL22",
	0xb3:"R_IA64_DTPREL64I",
	0xb4:"R_IA64_DTPREL32MSB",
	0xb5:"R_IA64_DTPREL32LSB",
	0xb6:"R_IA64_DTPREL64MSB",
	0xb7:"R_IA64_DTPREL64LSB",
	0xba:"R_IA64_LTOFF_DTPREL22"
}
IA64_SH_RELOCS = {
	0:"R_SH_NONE",
	1:"R_SH_DIR32",
	2:"R_SH_REL32",
	3:"R_SH_DIR8WPN",
	4:"R_SH_IND12W",
	5:"R_SH_DIR8WPL",
	6:"R_SH_DIR8WPZ",
	7:"R_SH_DIR8BP",
	8:"R_SH_DIR8W",
	9:"R_SH_DIR8L",
	25:"R_SH_SWITCH16",
	26:"R_SH_SWITCH32",
	27:"R_SH_USES",
	28:"R_SH_COUNT",
	29:"R_SH_ALIGN",
	30:"R_SH_CODE",
	31:"R_SH_DATA",
	32:"R_SH_LABEL",
	33:"R_SH_SWITCH8",
	34:"R_SH_GNU_VTINHERIT",
	35:"R_SH_GNU_VTENTRY",
	144:"R_SH_TLS_GD_32",
	145:"R_SH_TLS_LD_32",
	146:"R_SH_TLS_LDO_32",
	147:"R_SH_TLS_IE_32",
	148:"R_SH_TLS_LE_32",
	149:"R_SH_TLS_DTPMOD32",
	150:"R_SH_TLS_DTPOFF32",
	151:"R_SH_TLS_TPOFF32",
	160:"R_SH_GOT32",
	161:"R_SH_PLT32",
	162:"R_SH_COPY",
	163:"R_SH_GLOB_DAT",
	164:"R_SH_JMP_SLOT",
	165:"R_SH_RELATIVE",
	166:"R_SH_GOTOFF",
	167:"R_SH_GOTPC",
	256:"R_SH_NUM"
}
IA64_R_SH_NUM = 256
S390_RELOCS = {
	0:"R_390_NONE",
	1:"R_390_8",
	2:"R_390_12",
	3:"R_390_16",
	4:"R_390_32",
	5:"R_390_PC32",
	6:"R_390_GOT12",
	7:"R_390_GOT32",
	8:"R_390_PLT32",
	9:"R_390_COPY",
	10:"R_390_GLOB_DAT",
	11:"R_390_JMP_SLOT",
	12:"R_390_RELATIVE",
	13:"R_390_GOTOFF32",
	14:"R_390_GOTPC",
	15:"R_390_GOT16",
	16:"R_390_PC16",
	17:"R_390_PC16DBL",
	18:"R_390_PLT16DBL",
	19:"R_390_PC32DBL",
	20:"R_390_PLT32DBL",
	21:"R_390_GOTPCDBL",
	22:"R_390_64",
	23:"R_390_PC64",
	24:"R_390_GOT64",
	25:"R_390_PLT64",
	26:"R_390_GOTENT",
	27:"R_390_GOTOFF16",
	28:"R_390_GOTOFF64",
	29:"R_390_GOTPLT12",
	30:"R_390_GOTPLT16",
	31:"R_390_GOTPLT32",
	32:"R_390_GOTPLT64",
	33:"R_390_GOTPLTENT",
	34:"R_390_PLTOFF16",
	35:"R_390_PLTOFF32",
	36:"R_390_PLTOFF64",
	37:"R_390_TLS_LOAD",
	38:"R_390_TLS_GDCALL",
	39:"R_390_TLS_LDCALL",
	40:"R_390_TLS_GD32",
	41:"R_390_TLS_GD64",
	42:"R_390_TLS_GOTIE12",
	43:"R_390_TLS_GOTIE32",
	44:"R_390_TLS_GOTIE64",
	45:"R_390_TLS_LDM32",
	46:"R_390_TLS_LDM64",
	47:"R_390_TLS_IE32",
	48:"R_390_TLS_IE64",
	49:"R_390_TLS_IEENT",
	50:"R_390_TLS_LE32",
	51:"R_390_TLS_LE64",
	52:"R_390_TLS_LDO32",
	53:"R_390_TLS_LDO64",
	54:"R_390_TLS_DTPMOD",
	55:"R_390_TLS_DTPOFF",
	56:"R_390_TLS_TPOFF",
	57:"R_390_20",
	58:"R_390_GOT20",
	59:"R_390_GOTPLT20",
	60:"R_390_TLS_GOTIE20",
	61:"R_390_NUM"
}
R_390_NUM = 61
CRIS_RELOCS = {
	0:"R_CRIS_NONE",
	1:"R_CRIS_8",
	2:"R_CRIS_16",
	3:"R_CRIS_32",
	4:"R_CRIS_8_PCREL",
	5:"R_CRIS_16_PCREL",
	6:"R_CRIS_32_PCREL",
	7:"R_CRIS_GNU_VTINHERIT",
	8:"R_CRIS_GNU_VTENTRY",
	9:"R_CRIS_COPY",
	10:"R_CRIS_GLOB_DAT",
	11:"R_CRIS_JUMP_SLOT",
	12:"R_CRIS_RELATIVE",
	13:"R_CRIS_16_GOT",
	14:"R_CRIS_32_GOT",
	15:"R_CRIS_16_GOTPLT",
	16:"R_CRIS_32_GOTPLT",
	17:"R_CRIS_32_GOTREL",
	18:"R_CRIS_32_PLT_GOTREL",
	19:"R_CRIS_32_PLT_PCREL",
	20:"R_CRIS_NUM"
}
R_CRIS_NUM = 20

X8664_RELOCS ={
	0:"R_X86_64_NONE",
	1:"R_X86_64_64",
	2:"R_X86_64_PC32",
	3:"R_X86_64_GOT32",
	4:"R_X86_64_PLT32",
	5:"R_X86_64_COPY",
	6:"R_X86_64_GLOB_DAT",
	7:"R_X86_64_JUMP_SLOT",
	8:"R_X86_64_RELATIVE",
	9:"R_X86_64_GOTPCREL",
	10:"R_X86_64_32",
	11:"R_X86_64_32S",
	12:"R_X86_64_16",
	13:"R_X86_64_PC16",
	14:"R_X86_64_8",
	15:"R_X86_64_PC8",
	16:"R_X86_64_DTPMOD64",
	17:"R_X86_64_DTPOFF64",
	18:"R_X86_64_TPOFF64",
	19:"R_X86_64_TLSGD",
	20:"R_X86_64_TLSLD",
	21:"R_X86_64_DTPOFF32",
	22:"R_X86_64_GOTTPOFF",
	23:"R_X86_64_TPOFF32",
	24:"R_X86_64_NUM"
}
R_X86_64_NUM = 24
MN10300_RELOCS ={
	0:"R_MN10300_NONE",
	1:"R_MN10300_32",
	2:"R_MN10300_16",
	3:"R_MN10300_8",
	4:"R_MN10300_PCREL32",
	5:"R_MN10300_PCREL16",
	6:"R_MN10300_PCREL8",
	7:"R_MN10300_GNU_VTINHERIT",
	8:"R_MN10300_GNU_VTENTRY",
	9:"R_MN10300_24",
	10:"R_MN10300_GOTPC32",
	11:"R_MN10300_GOTPC16",
	12:"R_MN10300_GOTOFF32",
	13:"R_MN10300_GOTOFF24",
	14:"R_MN10300_GOTOFF16",
	15:"R_MN10300_PLT32",
	16:"R_MN10300_PLT16",
	17:"R_MN10300_GOT32",
	18:"R_MN10300_GOT24",
	19:"R_MN10300_GOT16",
	20:"R_MN10300_COPY",
	21:"R_MN10300_GLOB_DAT",
	22:"R_MN10300_JMP_SLOT",
	23:"R_MN10300_RELATIVE",
	24:"R_MN10300_NUM",
}
R_MN10300_NUM = 24

M32R_RELOCS = {
	0:"R_M32R_NONE",
	1:"R_M32R_16",
	2:"R_M32R_32",
	3:"R_M32R_24",
	4:"R_M32R_10_PCREL",
	5:"R_M32R_18_PCREL",
	6:"R_M32R_26_PCREL",
	7:"R_M32R_HI16_ULO",
	8:"R_M32R_HI16_SLO",
	9:"R_M32R_LO16",
	10:"R_M32R_SDA16",
	11:"R_M32R_GNU_VTINHERIT",
	12:"R_M32R_GNU_VTENTRY",
	33:"R_M32R_16_RELA",
	34:"R_M32R_32_RELA",
	35:"R_M32R_24_RELA",
	36:"R_M32R_10_PCREL_RELA",
	37:"R_M32R_18_PCREL_RELA",
	38:"R_M32R_26_PCREL_RELA",
	39:"R_M32R_HI16_ULO_RELA",
	40:"R_M32R_HI16_SLO_RELA",
	41:"R_M32R_LO16_RELA",
	42:"R_M32R_SDA16_RELA",
	43:"R_M32R_RELA_GNU_VTINHERIT",
	44:"R_M32R_RELA_GNU_VTENTRY",
	45:"R_M32R_REL32",
	48:"R_M32R_GOT24",
	49:"R_M32R_26_PLTREL",
	50:"R_M32R_COPY",
	51:"R_M32R_GLOB_DAT",
	52:"R_M32R_JMP_SLOT",
	53:"R_M32R_RELATIVE",
	54:"R_M32R_GOTOFF",
	55:"R_M32R_GOTPC24",
	56:"R_M32R_GOT16_HI_ULO",
	57:"R_M32R_GOT16_HI_SLO",
	58:"R_M32R_GOT16_LO",
	59:"R_M32R_GOTPC_HI_ULO",
	60:"R_M32R_GOTPC_HI_SLO",
	61:"R_M32R_GOTPC_LO",
	62:"R_M32R_GOTOFF_HI_ULO",
	63:"R_M32R_GOTOFF_HI_SLO",
	64:"R_M32R_GOTOFF_LO",
	256:"R_M32R_NUM"
}
R_M32R_NUM = 256

class gt_header(Structure):
		_fields_ = [
			("gt_current_g_value", c_uint32),
			("gt_unused", c_uint32)
						]

class header:
    def __init__(self, bytes):
        self.raw_bytes = deepcopy(bytes)
        self._val = cast(self.raw_bytes, POINTER(gt_header))
        self.val = self._val.contents
        
    def val(self):
        return self.val
    
    def bytes(self):
        return self.raw_bytes


class gt_entry(Structure):
		_fields_ = [
		("gt_g_value", c_uint32),
		("gt_bytes", c_uint32)
        ]

class entry:
    def __init__(self, bytes):
        self.raw_bytes = deepcopy(bytes)
        self._val = cast(self.raw_bytes, POINTER(gt_entry))
        self.val = self._val.contents
        
    def val(self):
        return self.val
    
    def bytes(self):
        return self.raw_bytes


class Elf_Options_Hw(Structure):
    _fields_ = [
  ("hwp_flags1",c_uint32),
  ("hwp_flags2",c_uint32)
    ]

class Options_hw:
    def __init__(self, bytes):
        self.raw_bytes = deepcopy(bytes)
        self._val = cast(self.raw_bytes, POINTER(Elf_Options_Hw))
        self.val = self._val.contents
        
    def val(self):
        return self.val
    
    def bytes(self):
        return self.raw_bytes



class Elf_Options(Structure):
    _fields_ =[
    ("kind", c_ubyte),
    ("size", c_ubyte),
    ("section", c_uint16),
    ("info", c_uint32),
    ]

class Options:
    def __init__(self, bytes):
        self.raw_bytes = deepcopy(bytes)
        self._val = cast(self.raw_bytes, POINTER(Elf_Options_Hw))
        self.val = self._val.contents
        
    def val(self):
        return self.val
    
    def bytes(self):
        return self.raw_bytes


class ElfPrinter:
    def __init__(self):
        pass
    
    def print_ehdr(self, ehdr):
        e_ident = "".join([chr(ehdr.e_ident[i]) for i in xrange(1, 4) ])
        return "Elf_Ehdr:\n" +\
        "e_ident: %s\n"%e_ident+\
        "e_type: 0x%x %s\n"%(ehdr.e_type, get_string(E_TYPE, ehdr.e_type))+\
        "e_machine: 0x%x %s\n"%(ehdr.e_machine,get_string(E_MACHINE,ehdr.e_machine))+\
        "e_version: 0x%x %s\n"%(ehdr.e_version,get_string(E_VERSION,ehdr.e_version))+\
        "e_entry (Entry Point): 0x%x\n"%ehdr.e_entry+\
        "e_phoff (Program Header Offset): 0x%x bytes\n"%ehdr.e_phoff+\
        "e_shoff (Section Header Offset): 0x%x bytes\n"%ehdr.e_shoff+\
        "e_flags: 0x%x\n"%ehdr.e_flags+\
        "e_ehsize (Elf Header Size): 0x%x bytes\n"%ehdr.e_ehsize+\
        "e_phentsize (Program Header Size): %d bytes\n"%ehdr.e_phentsize+\
        "e_phnum (Program Header Count)%d\n"%ehdr.e_phnum+\
        "e_shentsize (Section Header Size) %d bytes\n"%ehdr.e_shentsize+\
        "e_shnum (Section Header Count): %d\n"%ehdr.e_shnum+\
        "e_shstrndx (Section Header String Index): %d\n"%ehdr.e_shstrndx
    
    def print_phdr(self, phdr, desc):
        return "Elf_Phdr %s:\n"%desc+\
        "p_type: %x, %s\n"%(phdr.p_type, check_ph_type(phdr.p_type))+\
        "p_offset: %x\n"%phdr.p_offset+\
        "p_vaddr: %x\n"%phdr.p_vaddr+\
        "p_paddr: %x\n"%phdr.p_paddr+\
        "p_filesz %x\n"%phdr.p_filesz+\
        "p_memsz %x\n"%phdr.p_memsz+\
        "p_flags: %x\n"%phdr.p_flags+\
        "p_align %x\n"%phdr.p_align
    
    def print_shdr(self, shdr, name):            
         return "section name : %s\n"%name +\
         "section address: %x\n"%shdr.address +\
         "section virtual address: %x\n"%shdr.vaddr+\
         "sh_name location: %x\n"%shdr.sh_name +\
         "sh_type: %x %s\n"%(shdr.sh_type, check_sh_type(shdr.sh_type))+\
         "sh_flags: %x %s\n"%(shdr.sh_flags, resolve_flags(SH_FLAGS, shdr.sh_flags ))+\
         "sh_addr: %x\n"%shdr.sh_addr+\
         "sh_offset %x\n"%shdr.sh_offset+\
         "sh_size %x\n"%shdr.sh_size+\
         "sh_link %x\n"%shdr.sh_link+\
         "sh_info %x\n"%shdr.sh_info+\
         "sh_addralign %x\n"%shdr.sh_addralign+\
         "sh_entsize %x\n"%shdr.sh_entsize +\
         "sh_link and sh_type interp: %s"%shdr.link_type_interp

    def print_sym(self, sym):
        return "Elf Sym:\n"+\
        "st_name: %x\n"%sym.st_name+\
        "st_value: %x\n"%sym.st_value+\
        "st_size %x\n"%sym.st_size+\
        "st_info %x\n"%sym.st_info+\
        "st_other %x\n"%sym.st_other+\
        "st_shndx %x\n"%sym.st_shndx

    def print_syminfo(self, syminfo):
         return "Elf SymInfo:\n"+\
         "si_boundto: %x\n"%syminfo.si_boundto+\
         "si_flags: %x\n"%syminfo.si_flags

    def print_rel(self, rel):
        return "Elf Reloc:\n"+\
        "r_offset: %x\n"%rel.r_offset+\
        "r_info: %x\n"%rel.r_info

    def print_rela(self, rela):
        return "Elf Rela:\n"+\
        "r_offset: %x\n"%rela.r_offset+\
        "r_info: %x\n"%rela.r_info+\
        "r_addend: %x\n"%rela.r_addend

    def print_dyn(self, dyn):
        return "Elf Dyn:\n"+\
        "d_tag: %x\n"%dyn.d_tag+\
        "d_un: %x\n"%dyn.d_un

    def print_verdef(self, vd):
        return "Elf Verdef:\n"+\
        "vd_version: %x\n"%vd.vd_version+\
        "vd_flags: %x\n"%vd.vd_flags+\
        "vd_ndx: %x\n"%vd.vd_ndx+\
        "vd_cnt: %x\n"%vd.vd_cnt+\
        "vd_hash: %x\n"%vd.vd_hash+\
        "vd_aux: %x\n"%vd.vd_aux+\
        "vd_next: %x\n"%vd.vd_next

    def print_vernaux(self, vernaux):
         return "Elf Vernaux:\n"+\
         "vda_name: %x\n"%vernaux.vda_name+\
         "vda_next: %x\n"%vernaux.vda_next
    
    def print_verneed(self, verneed):
         return "Elf Verneed:\n"+\
         "vn_version: %x\n"%verneed.vn_version+\
         "vn_cnt: %x\n"%verneed.vn_cnt+\
         "vn_file: %x\n"%verneed.vn_file+\
         "vn_aux: %x\n"%verneed.vn_aux+\
         "vn_next: %x\n"%verneed.vn_next
    
    def print_vernaux(self, vernaux):
         return "Elf Vernaux:\n"+\
         "vna_hash: %x\n"%vernaux.vna_hash+\
         "vna_flags: %x\n"%vernaux.vna_flags+\
         "vna_other: %x\n"%vernaux.vna_other+\
         "vna_name: %x\n"%vernaux.vna_name+\
         "vna_next: %x\n"%vernaux.vna_next

    def print_auxv_t(self, aux_t):
        return "Elf auxv_t:\n"+\
        "a_type: %x\n"%aux_t.a_type+\
        "a_un: %x\n"%aux_t.a_un

    def print_nhdr(self, nhdr):
         return "Elf Nhdr:\n"+\
         "n_namesz: %x\n"%nhdr.n_namesz+\
         "n_descsz: %x\n"%nhdr.n_descsz+\
         "n_type: %x\n"%nhdr.n_type

    def print_move(self):
         return "Elf Move:\n"+\
         "m_value: %x\n"%move.m_value+\
         "m_info: %x\n"%move.m_info+\
         "m_poffset: %x\n"%move.m_poffset+\
         "m_repeat: %x\n"%move.m_repeat+\
         "m_stride: %x\n"%move.m_stride

    def print_hw_options(self, options):
         "Elf Options_Hw:\n"
         "hwp_flags1: %x\n"%options.hwp_flags1
         "hwp_flags2 %x\n"%options.hwp_flags2
    
    def print_lib(self, lib):
        return  "Elf Lib:\n"+\
         "l_name: %x\n"%lib.l_name+\
         "l_time_stamp %x\n"%lib.l_time_stamp+\
         "l_checksum: %x\n"%lib.l_checksum+\
         "l_version: %x\n"%lib.l_version+\
         "l_flags %x\n"%lib.l_flags 

    def print_options(self, options):
         return "Elf Options_Hw:\n"+\
         "hwp_flags1: %x\n"%options.hwp_flags1+\
         "hwp_flags2 %x\n"%options.hwp_flags2
    def print_gtheader(self, gt_hdr):
        return "Elf GT Header:\n"+\
         "gt_current_g_value: %x\n"%gt_hdr.gt_current_g_value+\
         "gt_unused: %x\n"%gt_hdr.gt_unused
         
    def print_gtentry(self, gt_ent):
        return "Elf GT Entry:\n"+\
         "gt_g_value: %s\n"%gt_ent.gt_g_value+\
         "gt_bytes: %s\n"%gt_ent.gt_bytes

    def print_gptab(self, gp_tab):
        return "Elf GP Table:\n"+\
         "gt_header: %s\n"%self.print_gt_header()+\
         "gt_entry: %s\n"%self.print_gt_entry()
    
    def print_reginfo(self, reginfo):
        return "Elf RegInfo:\n"+\
        "ri_gprmask: %x\n"%reginfo.ri_gprmask+\
        "ri_cprmask: %s\n"%[cast(i,int) for i in reginfo.ri_cprmask]+\
        "ri_gp_value: %x\n"%reginfo.ri_gp_mask

    
    def print_options(self, options):
        return "Elf Options:\n"+\
        "kind: %x\n"%options.kind+\
        "size: %s\n"%options.size+\
        "section: %x\n"%options.section+\
        "info: %x\n"%options.info



class StringTableEntry:
    elfaddr = None
    name = None
    type = None
    def __init__(self, elfaddr = None, name = None, type = None):
        self.elfaddr = elfaddr
        self.name = name
        self.type = type

class StringTable:
    raw_bytes =None
    strings = None
    address = None
    
    def __init__(self, bytes, address):
        self.raw_bytes = bytes
        self.strings =  self.raw_bytes.split('\0')
        self.address = address

class Section:
    def __init__(self, bytes, faddr=0x0, flags = 0x0, name="", type = ""):
        self.raw_bytes  = deepcopy(bytes)
        self.name = name
        self.vaddr = 0x0
        self.faddr = faddr
        self.type = type
        self.size = len(self.raw_bytes)
        self.info = ""
        # Reset stuff back or python will cache the values :(
        if faddr != 0x0:
            faddr = 0x0
        if flags != 0x0:
            flags = 0x0
        if name != "":
            name = ""
        if type != "":
            type = ""
    
    def bytes(self):
        return self.raw_bytes
    
    def toString(self):
        
        return "section type: %s\n"%self.type+\
                "section name: %s\n"%self.name+\
               "section address on disk: %x\n"%self.faddress+\
               "section flags: %x\n"%self.flags+\
            "section virtual addr: %x\n"%self.vaddress+\
            "context based interpretation: \n"+ str(self.info)
            
    def __str__(self):
        return self.toString()
