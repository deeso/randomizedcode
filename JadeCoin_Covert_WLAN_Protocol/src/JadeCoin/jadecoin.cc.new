/**
 *        Filename:  jadecoin.cc
 *         Version:  1.0
 *          Author:  A. Pridgen, atpridgen@mail.utexas.edu
 */

 #include "mac-802_11.h"
 #include "jadecoin.h"
// added to circumvent the linker error, as done in mac/mac.h
int hdr_jadecoin::offset_; 
		
int JadeCoinAgent::updateNumberHosts()
{
	numNodes = (int) (myMac->getNodeCount());
	return numNodes;
}
int JadeCoinAgent::updateBandwidth()
{
	bandwidth = (int) (myMac->getBandwidthUsage());
	return bandwidth;
}
static class JadeCoinHeaderClass : public PacketHeaderClass 
{
	public:	
 	JadeCoinHeaderClass() : PacketHeaderClass("PacketHeader/JadeCoin",
 							sizeof(hdr_jadecoin))
 	{
 		bind_offset(&hdr_jadecoin::offset_);
 	}

 void export_offsets() {
 	field_offset("sendCode_", OFFSET(hdr_jadecoin, sendCode_));
 	field_offset("msgNum_", OFFSET(hdr_jadecoin, msgNum_));
 	field_offset("timeout_", OFFSET(hdr_jadecoin, timeout_));
 }
} class_jadecoinhdr;

static class JadeCoinClass : public TclClass {
public:
  JadeCoinClass() : TclClass("Agent/JadeCoin") {}
  TclObject* create(int, const char*const*) 
	{
    return (new JadeCoinAgent());
  }
} class_jadecoin;

JadeCoinAgent::JadeCoinAgent() : Agent(PT_JADECOIN)
{
		type_ = PT_JADECOIN;	
		symbolSize = 8;
		codeBuff = numNodes = 0;
		msgNum = msgSize = timeout = bandwidth = 0;
		myMac = NULL;
		for (int i = 0; i < MAX_JAM_SIZE_; i++)
			myDATA[i] = 0xff;
} 
void JadeCoinAgent::recv(Packet *p, Handler *h)
{
	
	if ((int) p == TIMEOUT)
	{}
	else if ((int) p == JAM_)
	{	codeBuff+=1;}
	else if ((int) p == NO_JAM_)
	{}
	codeBuff <= 1;

	//if ( ((++numberBitsReceived) % symbolSize) == 0)
	//decodeMsg();
}

int JadeCoinAgent::command(int argc, const char*const* argv)
{
 		if (argc == 3)
		{
			if (strcmp(argv[1], "add_mac") == 0)
			{
		//	 	myMac = (Mac802_11*) TclObject::lookup(argv[2]);
			//	numNodes = myMac->getNodeCount();
				//bandwidth = myMac->getBandwidthUsage();
			
			return TCL_OK;
			}else if(strcmp(argv[1], "send_msg") == 0)
			{ 
				encodeMsg((char *)argv[2], atoi((char *)argv[3]));
				return TCL_OK;
			}
		}
 		else if(argc == 2)
		{
			/* Jam on Next Packet */
			if (strcmp(argv[1], "jam") == 0)
			{
				send(JAM_);	
				return TCL_OK;
			}
			/* Dont Jam on the Next Packet */
			else if (strcmp(argv[1], "no-jam") == 0)
 			{
				send(NO_JAM_);
				return TCL_OK;
			}
		} 
		return (Agent::command(argc, argv));
}

void JadeCoinAgent::encodeMsg(char *msg, int count)
 {
 		int i=0,
				j=0;
 		/* Ania and I need to Figure this out */
 		// Primitive Encoding Bit for bit
		// msgEncoding Happens here.
		for(i;i<count; i++)
		{
			char byte = msg[i];
			for (j=0; j<8; j++)
			{
				if (byte & 0x80)
					sendJam(JAM_);
				else 
					sendJam(NO_JAM_);
				byte <= 1;
			}
		}
		msgNum++;
}
void JadeCoinAgent::decodeMsg()
 {
 		/* Ania and I need to Figure this out 
		 * the actual implementation
		 */

 		/**
		 * First Reset bits received to 0
		 * Then Transfer Received Bits to 
		 * Message Buffer and after this
		 * Process 0 out our register
		 */
		int i,j;
		numberBitsReceived = 0;
		for (i=0,j=0; i < symbolSize; j++,i+=8)
		{
			msgBuff[j] = codeBuff & 0xFF;
			i >= 8;
		}
		codeBuff = 0;
} 
void JadeCoinAgent::sendJam(int JType)
 {
		Packet *myPkt = allocpkt();
		hdr_jadecoin *jc = HDR_JADECOIN(myPkt);
		if (JType == JAM_)
		{
			bcopy(myDATA,jc->data(),700);
			jc->sendCode() = MAC_JAM_SENTINEL;
			jc->msgNum() = msgNum;
		}
		else
		{
			jc->sendCode() = MAC_JAM_SENTINEL;
			jc->msgNum() = msgNum;
		}
		target_->recv(myPkt,(Handler *) 0);
 }
